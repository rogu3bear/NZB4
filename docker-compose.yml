version: '3.8'

services:
  # Flask API Service
  flask-api:
    build:
      context: .
      dockerfile: Dockerfile.flask
      # Pass host user's UID/GID to the container build to set correct permissions
      # This helps ensure the container user can write to mapped volumes
      args:
        USER_UID: ${UID:-1000} # Default to 1000 if UID is not set on host
        USER_GID: ${GID:-1000} # Default to 1000 if GID is not set on host
    image: nzb4-flask-api:latest # Optional: Name the built image
    container_name: nzb4-flask-api
    ports:
      - "5000:5000" # Map host port 5000 to container port 5000
    volumes:
      # Map host directories to container volumes for persistent data
      # Ensure these host directories exist or change paths as needed
      - ./complete:/complete # Maps local ./complete to /complete inside the container
      - ./downloads:/downloads # Maps local ./downloads to /downloads inside the container
    environment:
      # Runtime configuration overrides (optional)
      - FLASK_APP=app.py
      - FLASK_RUN_HOST=0.0.0.0
      - OUTPUT_DIR=/complete
      - DOWNLOAD_DIR=/downloads
      # - FLASK_DEBUG=1 # Uncomment for debug mode (development only)
    restart: unless-stopped # Restart policy
    healthcheck:
      # Uses the healthcheck defined in Dockerfile.flask
      test: ["CMD", "curl", "-f", "http://localhost:5000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Express.js API Service (TypeScript)
  express-api:
    build:
      context: .
      dockerfile: Dockerfile.express
      args:
        USER_UID: ${UID:-1000}
        USER_GID: ${GID:-1000}
    image: nzb4-express-api:latest # Optional: Name the built image
    container_name: nzb4-express-api
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000
    volumes:
      # Map the same host directories for consistency
      - ./complete:/complete
      - ./downloads:/downloads
    environment:
      # Runtime configuration overrides (optional)
      - PORT=3000
      - HOST=0.0.0.0
      - OUTPUT_DIR=/complete
      - DOWNLOAD_DIR=/downloads
      # - LOG_LEVEL=debug # Uncomment for verbose logging
      # - CORS_ORIGIN=http://localhost:8080 # Example CORS origin setting
    restart: unless-stopped
    healthcheck:
      # Uses the healthcheck defined in Dockerfile.express
      test: ["CMD", "curl", "-f", "http://localhost:3000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

# Define named volumes (alternative to host binds, if preferred)
# volumes:
#   complete_data:
#   download_data:
# If using named volumes, change the volume mappings above, e.g.:
#   - complete_data:/complete
#   - download_data:/downloads

networks:
  nzb4_net:
    driver: bridge

volumes:
  data:
    driver: local 